// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Channels", testChannels)
	t.Run("IPLogs", testIPLogs)
	t.Run("Rooms", testRooms)
	t.Run("ServiceInfos", testServiceInfos)
	t.Run("Tags", testTags)
	t.Run("UserConfigs", testUserConfigs)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Channels", testChannelsDelete)
	t.Run("IPLogs", testIPLogsDelete)
	t.Run("Rooms", testRoomsDelete)
	t.Run("ServiceInfos", testServiceInfosDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("UserConfigs", testUserConfigsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Channels", testChannelsQueryDeleteAll)
	t.Run("IPLogs", testIPLogsQueryDeleteAll)
	t.Run("Rooms", testRoomsQueryDeleteAll)
	t.Run("ServiceInfos", testServiceInfosQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("UserConfigs", testUserConfigsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Channels", testChannelsSliceDeleteAll)
	t.Run("IPLogs", testIPLogsSliceDeleteAll)
	t.Run("Rooms", testRoomsSliceDeleteAll)
	t.Run("ServiceInfos", testServiceInfosSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("UserConfigs", testUserConfigsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Channels", testChannelsExists)
	t.Run("IPLogs", testIPLogsExists)
	t.Run("Rooms", testRoomsExists)
	t.Run("ServiceInfos", testServiceInfosExists)
	t.Run("Tags", testTagsExists)
	t.Run("UserConfigs", testUserConfigsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Channels", testChannelsFind)
	t.Run("IPLogs", testIPLogsFind)
	t.Run("Rooms", testRoomsFind)
	t.Run("ServiceInfos", testServiceInfosFind)
	t.Run("Tags", testTagsFind)
	t.Run("UserConfigs", testUserConfigsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Channels", testChannelsBind)
	t.Run("IPLogs", testIPLogsBind)
	t.Run("Rooms", testRoomsBind)
	t.Run("ServiceInfos", testServiceInfosBind)
	t.Run("Tags", testTagsBind)
	t.Run("UserConfigs", testUserConfigsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Channels", testChannelsOne)
	t.Run("IPLogs", testIPLogsOne)
	t.Run("Rooms", testRoomsOne)
	t.Run("ServiceInfos", testServiceInfosOne)
	t.Run("Tags", testTagsOne)
	t.Run("UserConfigs", testUserConfigsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Channels", testChannelsAll)
	t.Run("IPLogs", testIPLogsAll)
	t.Run("Rooms", testRoomsAll)
	t.Run("ServiceInfos", testServiceInfosAll)
	t.Run("Tags", testTagsAll)
	t.Run("UserConfigs", testUserConfigsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Channels", testChannelsCount)
	t.Run("IPLogs", testIPLogsCount)
	t.Run("Rooms", testRoomsCount)
	t.Run("ServiceInfos", testServiceInfosCount)
	t.Run("Tags", testTagsCount)
	t.Run("UserConfigs", testUserConfigsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Channels", testChannelsHooks)
	t.Run("IPLogs", testIPLogsHooks)
	t.Run("Rooms", testRoomsHooks)
	t.Run("ServiceInfos", testServiceInfosHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("UserConfigs", testUserConfigsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Channels", testChannelsInsert)
	t.Run("Channels", testChannelsInsertWhitelist)
	t.Run("IPLogs", testIPLogsInsert)
	t.Run("IPLogs", testIPLogsInsertWhitelist)
	t.Run("Rooms", testRoomsInsert)
	t.Run("Rooms", testRoomsInsertWhitelist)
	t.Run("ServiceInfos", testServiceInfosInsert)
	t.Run("ServiceInfos", testServiceInfosInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("UserConfigs", testUserConfigsInsert)
	t.Run("UserConfigs", testUserConfigsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("IPLogToUserUsingUser", testIPLogToOneUserUsingUser)
	t.Run("RoomToUserUsingOwnerUser", testRoomToOneUserUsingOwnerUser)
	t.Run("RoomToChannelUsingChannel", testRoomToOneChannelUsingChannel)
	t.Run("ServiceInfoToChannelUsingChannel", testServiceInfoToOneChannelUsingChannel)
	t.Run("UserConfigToUserUsingUser", testUserConfigToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("ChannelToServiceInfoUsingServiceInfo", testChannelOneToOneServiceInfoUsingServiceInfo)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChannelToTags", testChannelToManyTags)
	t.Run("ChannelToRooms", testChannelToManyRooms)
	t.Run("RoomToUserIDUsers", testRoomToManyUserIDUsers)
	t.Run("RoomToTags", testRoomToManyTags)
	t.Run("TagToChannels", testTagToManyChannels)
	t.Run("TagToRooms", testTagToManyRooms)
	t.Run("UserToIPLogs", testUserToManyIPLogs)
	t.Run("UserToRooms", testUserToManyRooms)
	t.Run("UserToOwnerUserRooms", testUserToManyOwnerUserRooms)
	t.Run("UserToUserConfigs", testUserToManyUserConfigs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("IPLogToUserUsingIPLogs", testIPLogToOneSetOpUserUsingUser)
	t.Run("RoomToUserUsingOwnerUserRooms", testRoomToOneSetOpUserUsingOwnerUser)
	t.Run("RoomToChannelUsingRooms", testRoomToOneSetOpChannelUsingChannel)
	t.Run("ServiceInfoToChannelUsingServiceInfo", testServiceInfoToOneSetOpChannelUsingChannel)
	t.Run("UserConfigToUserUsingUserConfigs", testUserConfigToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("RoomToUserUsingOwnerUserRooms", testRoomToOneRemoveOpUserUsingOwnerUser)
	t.Run("RoomToChannelUsingRooms", testRoomToOneRemoveOpChannelUsingChannel)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("ChannelToServiceInfoUsingServiceInfo", testChannelOneToOneSetOpServiceInfoUsingServiceInfo)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChannelToTags", testChannelToManyAddOpTags)
	t.Run("ChannelToRooms", testChannelToManyAddOpRooms)
	t.Run("RoomToUserIDUsers", testRoomToManyAddOpUserIDUsers)
	t.Run("RoomToTags", testRoomToManyAddOpTags)
	t.Run("TagToChannels", testTagToManyAddOpChannels)
	t.Run("TagToRooms", testTagToManyAddOpRooms)
	t.Run("UserToIPLogs", testUserToManyAddOpIPLogs)
	t.Run("UserToRooms", testUserToManyAddOpRooms)
	t.Run("UserToOwnerUserRooms", testUserToManyAddOpOwnerUserRooms)
	t.Run("UserToUserConfigs", testUserToManyAddOpUserConfigs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ChannelToTags", testChannelToManySetOpTags)
	t.Run("ChannelToRooms", testChannelToManySetOpRooms)
	t.Run("RoomToUserIDUsers", testRoomToManySetOpUserIDUsers)
	t.Run("RoomToTags", testRoomToManySetOpTags)
	t.Run("TagToChannels", testTagToManySetOpChannels)
	t.Run("TagToRooms", testTagToManySetOpRooms)
	t.Run("UserToRooms", testUserToManySetOpRooms)
	t.Run("UserToOwnerUserRooms", testUserToManySetOpOwnerUserRooms)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ChannelToTags", testChannelToManyRemoveOpTags)
	t.Run("ChannelToRooms", testChannelToManyRemoveOpRooms)
	t.Run("RoomToUserIDUsers", testRoomToManyRemoveOpUserIDUsers)
	t.Run("RoomToTags", testRoomToManyRemoveOpTags)
	t.Run("TagToChannels", testTagToManyRemoveOpChannels)
	t.Run("TagToRooms", testTagToManyRemoveOpRooms)
	t.Run("UserToRooms", testUserToManyRemoveOpRooms)
	t.Run("UserToOwnerUserRooms", testUserToManyRemoveOpOwnerUserRooms)
}

func TestReload(t *testing.T) {
	t.Run("Channels", testChannelsReload)
	t.Run("IPLogs", testIPLogsReload)
	t.Run("Rooms", testRoomsReload)
	t.Run("ServiceInfos", testServiceInfosReload)
	t.Run("Tags", testTagsReload)
	t.Run("UserConfigs", testUserConfigsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Channels", testChannelsReloadAll)
	t.Run("IPLogs", testIPLogsReloadAll)
	t.Run("Rooms", testRoomsReloadAll)
	t.Run("ServiceInfos", testServiceInfosReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("UserConfigs", testUserConfigsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Channels", testChannelsSelect)
	t.Run("IPLogs", testIPLogsSelect)
	t.Run("Rooms", testRoomsSelect)
	t.Run("ServiceInfos", testServiceInfosSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("UserConfigs", testUserConfigsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Channels", testChannelsUpdate)
	t.Run("IPLogs", testIPLogsUpdate)
	t.Run("Rooms", testRoomsUpdate)
	t.Run("ServiceInfos", testServiceInfosUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("UserConfigs", testUserConfigsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Channels", testChannelsSliceUpdateAll)
	t.Run("IPLogs", testIPLogsSliceUpdateAll)
	t.Run("Rooms", testRoomsSliceUpdateAll)
	t.Run("ServiceInfos", testServiceInfosSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("UserConfigs", testUserConfigsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
