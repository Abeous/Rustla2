// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRooms(t *testing.T) {
	t.Parallel()

	query := Rooms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoomsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rooms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoomSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoomExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Room exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoomExists to return true, but got false.")
	}
}

func testRoomsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roomFound, err := FindRoom(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roomFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoomsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rooms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoomsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rooms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoomsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roomOne := &Room{}
	roomTwo := &Room{}
	if err = randomize.Struct(seed, roomOne, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err = randomize.Struct(seed, roomTwo, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roomOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roomTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rooms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoomsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roomOne := &Room{}
	roomTwo := &Room{}
	if err = randomize.Struct(seed, roomOne, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err = randomize.Struct(seed, roomTwo, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roomOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roomTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roomBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func roomAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Room) error {
	*o = Room{}
	return nil
}

func testRoomsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Room{}
	o := &Room{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roomDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Room object: %s", err)
	}

	AddRoomHook(boil.BeforeInsertHook, roomBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roomBeforeInsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterInsertHook, roomAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roomAfterInsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterSelectHook, roomAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roomAfterSelectHooks = []RoomHook{}

	AddRoomHook(boil.BeforeUpdateHook, roomBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roomBeforeUpdateHooks = []RoomHook{}

	AddRoomHook(boil.AfterUpdateHook, roomAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roomAfterUpdateHooks = []RoomHook{}

	AddRoomHook(boil.BeforeDeleteHook, roomBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roomBeforeDeleteHooks = []RoomHook{}

	AddRoomHook(boil.AfterDeleteHook, roomAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roomAfterDeleteHooks = []RoomHook{}

	AddRoomHook(boil.BeforeUpsertHook, roomBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roomBeforeUpsertHooks = []RoomHook{}

	AddRoomHook(boil.AfterUpsertHook, roomAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roomAfterUpsertHooks = []RoomHook{}
}

func testRoomsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roomColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomToManyUserIDUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `room_editor_users` (`room_id`, `user_Id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `room_editor_users` (`room_id`, `user_Id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.UserIDUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ID, b.ID) {
			bFound = true
		}
		if queries.Equal(v.ID, c.ID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoomSlice{&a}
	if err = a.L.LoadUserIDUsers(ctx, tx, false, (*[]*Room)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserIDUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserIDUsers = nil
	if err = a.L.LoadUserIDUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserIDUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoomToManyTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `room_tags` (`room_id`, `tag_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `room_tags` (`room_id`, `tag_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Tags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ID, b.ID) {
			bFound = true
		}
		if queries.Equal(v.ID, c.ID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoomSlice{&a}
	if err = a.L.LoadTags(ctx, tx, false, (*[]*Room)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tags = nil
	if err = a.L.LoadTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoomToManyAddOpUserIDUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserIDUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Rooms[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Rooms[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.UserIDUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserIDUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserIDUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoomToManySetOpUserIDUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUserIDUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserIDUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUserIDUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserIDUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Rooms) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Rooms) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.UserIDUsers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UserIDUsers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoomToManyRemoveOpUserIDUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUserIDUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserIDUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUserIDUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserIDUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Rooms) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Rooms) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.UserIDUsers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UserIDUsers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UserIDUsers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoomToManyAddOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Rooms[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Rooms[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Tags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoomToManySetOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTags(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTags(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Rooms) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Rooms) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Tags[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Tags[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoomToManyRemoveOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTags(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTags(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Rooms) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Rooms) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Rooms[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Tags) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Tags[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Tags[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoomToOneUserUsingOwnerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Room
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OwnerUserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OwnerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoomSlice{&local}
	if err = local.L.LoadOwnerUser(ctx, tx, false, (*[]*Room)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OwnerUser = nil
	if err = local.L.LoadOwnerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoomToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Room
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ChannelID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoomSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*Room)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoomToOneSetOpUserUsingOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwnerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OwnerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerUserRooms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OwnerUserID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerUserID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OwnerUserID, x.ID) {
			t.Error("foreign key was wrong value", a.OwnerUserID, x.ID)
		}
	}
}

func testRoomToOneRemoveOpUserUsingOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOwnerUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOwnerUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OwnerUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OwnerUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OwnerUserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OwnerUserRooms) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoomToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rooms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID, x.ID)
		}
	}
}

func testRoomToOneRemoveOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Room
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Channel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Channel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ChannelID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Rooms) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRoomsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoomsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoomSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoomsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rooms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roomDBTypes = map[string]string{`ID`: `bigint`, `Path`: `varchar`, `OwnerUserID`: `bigint`, `ChannelID`: `bigint`, `Title`: `varchar`, `Description`: `text`, `ThumbnailURL`: `varchar`}
	_           = bytes.MinRead
)

func testRoomsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roomDBTypes, true, roomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoomsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Room{}
	if err = randomize.Struct(seed, o, roomDBTypes, true, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roomDBTypes, true, roomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roomColumns, roomPrimaryKeyColumns) {
		fields = roomColumns
	} else {
		fields = strmangle.SetComplement(
			roomColumns,
			roomPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoomSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoomsUpsert(t *testing.T) {
	t.Parallel()

	if len(roomColumns) == len(roomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRoomUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Room{}
	if err = randomize.Struct(seed, &o, roomDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Room: %s", err)
	}

	count, err := Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roomDBTypes, false, roomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Room: %s", err)
	}

	count, err = Rooms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
