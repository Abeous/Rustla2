// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Room is an object representing the database table.
type Room struct {
	ID           null.Uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Path         string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	OwnerUserID  null.Uint64 `boil:"owner_user_id" json:"owner_user_id,omitempty" toml:"owner_user_id" yaml:"owner_user_id,omitempty"`
	ChannelID    null.Uint64 `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	Title        null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ThumbnailURL null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`

	R *roomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomColumns = struct {
	ID           string
	Path         string
	OwnerUserID  string
	ChannelID    string
	Title        string
	Description  string
	ThumbnailURL string
}{
	ID:           "id",
	Path:         "path",
	OwnerUserID:  "owner_user_id",
	ChannelID:    "channel_id",
	Title:        "title",
	Description:  "description",
	ThumbnailURL: "thumbnail_url",
}

// Generated where

var RoomWhere = struct {
	ID           whereHelpernull_Uint64
	Path         whereHelperstring
	OwnerUserID  whereHelpernull_Uint64
	ChannelID    whereHelpernull_Uint64
	Title        whereHelpernull_String
	Description  whereHelpernull_String
	ThumbnailURL whereHelpernull_String
}{
	ID:           whereHelpernull_Uint64{field: `id`},
	Path:         whereHelperstring{field: `path`},
	OwnerUserID:  whereHelpernull_Uint64{field: `owner_user_id`},
	ChannelID:    whereHelpernull_Uint64{field: `channel_id`},
	Title:        whereHelpernull_String{field: `title`},
	Description:  whereHelpernull_String{field: `description`},
	ThumbnailURL: whereHelpernull_String{field: `thumbnail_url`},
}

// RoomRels is where relationship names are stored.
var RoomRels = struct {
	OwnerUser   string
	Channel     string
	UserIDUsers string
	Tags        string
}{
	OwnerUser:   "OwnerUser",
	Channel:     "Channel",
	UserIDUsers: "UserIDUsers",
	Tags:        "Tags",
}

// roomR is where relationships are stored.
type roomR struct {
	OwnerUser   *User
	Channel     *Channel
	UserIDUsers UserSlice
	Tags        TagSlice
}

// NewStruct creates a new relationship struct
func (*roomR) NewStruct() *roomR {
	return &roomR{}
}

// roomL is where Load methods for each relationship are stored.
type roomL struct{}

var (
	roomColumns               = []string{"id", "path", "owner_user_id", "channel_id", "title", "description", "thumbnail_url"}
	roomColumnsWithoutDefault = []string{"id", "path", "owner_user_id", "channel_id", "title", "description", "thumbnail_url"}
	roomColumnsWithDefault    = []string{}
	roomPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoomSlice is an alias for a slice of pointers to Room.
	// This should generally be used opposed to []Room.
	RoomSlice []*Room
	// RoomHook is the signature for custom Room hook methods
	RoomHook func(context.Context, boil.ContextExecutor, *Room) error

	roomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomType                 = reflect.TypeOf(&Room{})
	roomMapping              = queries.MakeStructMapping(roomType)
	roomPrimaryKeyMapping, _ = queries.BindMapping(roomType, roomMapping, roomPrimaryKeyColumns)
	roomInsertCacheMut       sync.RWMutex
	roomInsertCache          = make(map[string]insertCache)
	roomUpdateCacheMut       sync.RWMutex
	roomUpdateCache          = make(map[string]updateCache)
	roomUpsertCacheMut       sync.RWMutex
	roomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomBeforeInsertHooks []RoomHook
var roomBeforeUpdateHooks []RoomHook
var roomBeforeDeleteHooks []RoomHook
var roomBeforeUpsertHooks []RoomHook

var roomAfterInsertHooks []RoomHook
var roomAfterSelectHooks []RoomHook
var roomAfterUpdateHooks []RoomHook
var roomAfterDeleteHooks []RoomHook
var roomAfterUpsertHooks []RoomHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Room) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Room) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Room) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Room) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Room) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Room) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Room) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Room) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Room) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomHook registers your hook function for all future operations.
func AddRoomHook(hookPoint boil.HookPoint, roomHook RoomHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roomBeforeInsertHooks = append(roomBeforeInsertHooks, roomHook)
	case boil.BeforeUpdateHook:
		roomBeforeUpdateHooks = append(roomBeforeUpdateHooks, roomHook)
	case boil.BeforeDeleteHook:
		roomBeforeDeleteHooks = append(roomBeforeDeleteHooks, roomHook)
	case boil.BeforeUpsertHook:
		roomBeforeUpsertHooks = append(roomBeforeUpsertHooks, roomHook)
	case boil.AfterInsertHook:
		roomAfterInsertHooks = append(roomAfterInsertHooks, roomHook)
	case boil.AfterSelectHook:
		roomAfterSelectHooks = append(roomAfterSelectHooks, roomHook)
	case boil.AfterUpdateHook:
		roomAfterUpdateHooks = append(roomAfterUpdateHooks, roomHook)
	case boil.AfterDeleteHook:
		roomAfterDeleteHooks = append(roomAfterDeleteHooks, roomHook)
	case boil.AfterUpsertHook:
		roomAfterUpsertHooks = append(roomAfterUpsertHooks, roomHook)
	}
}

// One returns a single room record from the query.
func (q roomQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Room, error) {
	o := &Room{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rooms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Room records from the query.
func (q roomQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomSlice, error) {
	var o []*Room

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Room slice")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Room records in the query.
func (q roomQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rooms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roomQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rooms exists")
	}

	return count > 0, nil
}

// OwnerUser pointed to by the foreign key.
func (o *Room) OwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OwnerUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Channel pointed to by the foreign key.
func (o *Room) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	query := Channels(queryMods...)
	queries.SetFrom(query.Query, "`channels`")

	return query
}

// UserIDUsers retrieves all the user's Users with an executor via id column.
func (o *Room) UserIDUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`room_editor_users` on `users`.`id` = `room_editor_users`.`user_Id`"),
		qm.Where("`room_editor_users`.`room_id`=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`users`.*"})
	}

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Room) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`room_tags` on `tags`.`id` = `room_tags`.`tag_id`"),
		qm.Where("`room_tags`.`room_id`=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "`tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`tags`.*"})
	}

	return query
}

// LoadOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomL) LoadOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		if !queries.IsNil(object.OwnerUserID) {
			args = append(args, object.OwnerUserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OwnerUserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OwnerUserID) {
				args = append(args, obj.OwnerUserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerUserRooms = append(foreign.R.OwnerUserRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerUserID, foreign.ID) {
				local.R.OwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerUserRooms = append(foreign.R.OwnerUserRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args = append(args, object.ChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChannelID) {
				args = append(args, obj.ChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`channels`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Rooms = append(foreign.R.Rooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Rooms = append(foreign.R.Rooms, local)
				break
			}
		}
	}

	return nil
}

// LoadUserIDUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadUserIDUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`users`.*, `a`.`room_id`"),
		qm.From("`users`"),
		qm.InnerJoin("`room_editor_users` as `a` on `users`.`id` = `a`.`user_Id`"),
		qm.WhereIn("`a`.`room_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []null.Uint64
	for results.Next() {
		one := new(User)
		var localJoinCol null.Uint64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.UpdatedAt, &one.TwitchID, &one.TwitchUsername, &one.Name, &one.BanReason, &one.IsBanned, &one.IsAdmin, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIDUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Rooms = append(foreign.R.Rooms, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.UserIDUsers = append(local.R.UserIDUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Rooms = append(foreign.R.Rooms, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`tags`.*, `a`.`room_id`"),
		qm.From("`tags`"),
		qm.InnerJoin("`room_tags` as `a` on `tags`.`id` = `a`.`tag_id`"),
		qm.WhereIn("`a`.`room_id` in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag

	var localJoinCols []null.Uint64
	for results.Next() {
		one := new(Tag)
		var localJoinCol null.Uint64

		err = results.Scan(&one.ID, &one.Value, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tags")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Rooms = append(foreign.R.Rooms, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if queries.Equal(local.ID, localJoinCol) {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Rooms = append(foreign.R.Rooms, local)
				break
			}
		}
	}

	return nil
}

// SetOwnerUser of the room to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerUserRooms.
func (o *Room) SetOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `rooms` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"owner_user_id"}),
		strmangle.WhereClause("`", "`", 0, roomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerUserID, related.ID)
	if o.R == nil {
		o.R = &roomR{
			OwnerUser: related,
		}
	} else {
		o.R.OwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerUserRooms: RoomSlice{o},
		}
	} else {
		related.R.OwnerUserRooms = append(related.R.OwnerUserRooms, o)
	}

	return nil
}

// RemoveOwnerUser relationship.
// Sets o.R.OwnerUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Room) RemoveOwnerUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.OwnerUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.OwnerUser = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerUserRooms {
		if queries.Equal(o.OwnerUserID, ri.OwnerUserID) {
			continue
		}

		ln := len(related.R.OwnerUserRooms)
		if ln > 1 && i < ln-1 {
			related.R.OwnerUserRooms[i] = related.R.OwnerUserRooms[ln-1]
		}
		related.R.OwnerUserRooms = related.R.OwnerUserRooms[:ln-1]
		break
	}
	return nil
}

// SetChannel of the room to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Rooms.
func (o *Room) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `rooms` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"channel_id"}),
		strmangle.WhereClause("`", "`", 0, roomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ID)
	if o.R == nil {
		o.R = &roomR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Rooms: RoomSlice{o},
		}
	} else {
		related.R.Rooms = append(related.R.Rooms, o)
	}

	return nil
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Room) RemoveChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Channel = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Rooms {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.Rooms)
		if ln > 1 && i < ln-1 {
			related.R.Rooms[i] = related.R.Rooms[ln-1]
		}
		related.R.Rooms = related.R.Rooms[:ln-1]
		break
	}
	return nil
}

// AddUserIDUsers adds the given related objects to the existing relationships
// of the room, optionally inserting them as new records.
// Appends related to o.R.UserIDUsers.
// Sets related.R.Rooms appropriately.
func (o *Room) AddUserIDUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `room_editor_users` (`room_id`, `user_Id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &roomR{
			UserIDUsers: related,
		}
	} else {
		o.R.UserIDUsers = append(o.R.UserIDUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Rooms: RoomSlice{o},
			}
		} else {
			rel.R.Rooms = append(rel.R.Rooms, o)
		}
	}
	return nil
}

// SetUserIDUsers removes all previously related items of the
// room replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rooms's UserIDUsers accordingly.
// Replaces o.R.UserIDUsers with related.
// Sets related.R.Rooms's UserIDUsers accordingly.
func (o *Room) SetUserIDUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from `room_editor_users` where `room_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUserIDUsersFromRoomsSlice(o, related)
	if o.R != nil {
		o.R.UserIDUsers = nil
	}
	return o.AddUserIDUsers(ctx, exec, insert, related...)
}

// RemoveUserIDUsers relationships from objects passed in.
// Removes related items from R.UserIDUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.Rooms.
func (o *Room) RemoveUserIDUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from `room_editor_users` where `room_id` = ? and `user_Id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUserIDUsersFromRoomsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserIDUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserIDUsers)
			if ln > 1 && i < ln-1 {
				o.R.UserIDUsers[i] = o.R.UserIDUsers[ln-1]
			}
			o.R.UserIDUsers = o.R.UserIDUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeUserIDUsersFromRoomsSlice(o *Room, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Rooms {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.Rooms)
			if ln > 1 && i < ln-1 {
				rel.R.Rooms[i] = rel.R.Rooms[ln-1]
			}
			rel.R.Rooms = rel.R.Rooms[:ln-1]
			break
		}
	}
}

// AddTags adds the given related objects to the existing relationships
// of the room, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Rooms appropriately.
func (o *Room) AddTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `room_tags` (`room_id`, `tag_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &roomR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Rooms: RoomSlice{o},
			}
		} else {
			rel.R.Rooms = append(rel.R.Rooms, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// room replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rooms's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Rooms's Tags accordingly.
func (o *Room) SetTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	query := "delete from `room_tags` where `room_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromRoomsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(ctx, exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Rooms.
func (o *Room) RemoveTags(ctx context.Context, exec boil.ContextExecutor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from `room_tags` where `room_id` = ? and `tag_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromRoomsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromRoomsSlice(o *Room, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Rooms {
			if !queries.Equal(o.ID, ri.ID) {
				continue
			}

			ln := len(rel.R.Rooms)
			if ln > 1 && i < ln-1 {
				rel.R.Rooms[i] = rel.R.Rooms[ln-1]
			}
			rel.R.Rooms = rel.R.Rooms[:ln-1]
			break
		}
	}
}

// Rooms retrieves all the records using an executor.
func Rooms(mods ...qm.QueryMod) roomQuery {
	mods = append(mods, qm.From("`rooms`"))
	return roomQuery{NewQuery(mods...)}
}

// FindRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoom(ctx context.Context, exec boil.ContextExecutor, iD null.Uint64, selectCols ...string) (*Room, error) {
	roomObj := &Room{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `rooms` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roomObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rooms")
	}

	return roomObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Room) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rooms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomInsertCacheMut.RLock()
	cache, cached := roomInsertCache[key]
	roomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomType, roomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `rooms` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `rooms` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `rooms` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, roomPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rooms")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rooms")
	}

CacheNoHooks:
	if !cached {
		roomInsertCacheMut.Lock()
		roomInsertCache[key] = cache
		roomInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Room.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Room) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomUpdateCacheMut.RLock()
	cache, cached := roomUpdateCache[key]
	roomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomColumns,
			roomPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rooms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `rooms` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, roomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, append(wl, roomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rooms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rooms")
	}

	if !cached {
		roomUpdateCacheMut.Lock()
		roomUpdateCache[key] = cache
		roomUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roomQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rooms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `rooms` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all room")
	}
	return rowsAff, nil
}

var mySQLRoomUniqueColumns = []string{
	"id",
	"path",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Room) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rooms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRoomUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomUpsertCacheMut.RLock()
	cache, cached := roomUpsertCache[key]
	roomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roomColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roomColumns,
			roomPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert rooms, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "rooms", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `rooms` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomType, roomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for rooms")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(roomType, roomMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for rooms")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rooms")
	}

CacheNoHooks:
	if !cached {
		roomUpsertCacheMut.Lock()
		roomUpsertCache[key] = cache
		roomUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Room record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Room) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Room provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomPrimaryKeyMapping)
	sql := "DELETE FROM `rooms` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rooms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roomQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Room slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(roomBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `rooms` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rooms")
	}

	if len(roomAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Room) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoom(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `rooms`.* FROM `rooms` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoomSlice")
	}

	*o = slice

	return nil
}

// RoomExists checks if the Room row exists.
func RoomExists(ctx context.Context, exec boil.ContextExecutor, iD null.Uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `rooms` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rooms exists")
	}

	return exists, nil
}
