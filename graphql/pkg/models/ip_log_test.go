// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIPLogs(t *testing.T) {
	t.Parallel()

	query := IPLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIPLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := IPLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IPLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIPLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IPLogExists(ctx, tx, o.UserID, o.LastSeenAt)
	if err != nil {
		t.Errorf("Unable to check if IPLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IPLogExists to return true, but got false.")
	}
}

func testIPLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ipLogFound, err := FindIPLog(ctx, tx, o.UserID, o.LastSeenAt)
	if err != nil {
		t.Error(err)
	}

	if ipLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIPLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = IPLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIPLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := IPLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIPLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ipLogOne := &IPLog{}
	ipLogTwo := &IPLog{}
	if err = randomize.Struct(seed, ipLogOne, ipLogDBTypes, false, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}
	if err = randomize.Struct(seed, ipLogTwo, ipLogDBTypes, false, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ipLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ipLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IPLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIPLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ipLogOne := &IPLog{}
	ipLogTwo := &IPLog{}
	if err = randomize.Struct(seed, ipLogOne, ipLogDBTypes, false, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}
	if err = randomize.Struct(seed, ipLogTwo, ipLogDBTypes, false, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ipLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ipLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ipLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func ipLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *IPLog) error {
	*o = IPLog{}
	return nil
}

func testIPLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &IPLog{}
	o := &IPLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ipLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IPLog object: %s", err)
	}

	AddIPLogHook(boil.BeforeInsertHook, ipLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ipLogBeforeInsertHooks = []IPLogHook{}

	AddIPLogHook(boil.AfterInsertHook, ipLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ipLogAfterInsertHooks = []IPLogHook{}

	AddIPLogHook(boil.AfterSelectHook, ipLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ipLogAfterSelectHooks = []IPLogHook{}

	AddIPLogHook(boil.BeforeUpdateHook, ipLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ipLogBeforeUpdateHooks = []IPLogHook{}

	AddIPLogHook(boil.AfterUpdateHook, ipLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ipLogAfterUpdateHooks = []IPLogHook{}

	AddIPLogHook(boil.BeforeDeleteHook, ipLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ipLogBeforeDeleteHooks = []IPLogHook{}

	AddIPLogHook(boil.AfterDeleteHook, ipLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ipLogAfterDeleteHooks = []IPLogHook{}

	AddIPLogHook(boil.BeforeUpsertHook, ipLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ipLogBeforeUpsertHooks = []IPLogHook{}

	AddIPLogHook(boil.AfterUpsertHook, ipLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ipLogAfterUpsertHooks = []IPLogHook{}
}

func testIPLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIPLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ipLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIPLogToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local IPLog
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ipLogDBTypes, false, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := IPLogSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*IPLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testIPLogToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a IPLog
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ipLogDBTypes, false, strmangle.SetComplement(ipLogPrimaryKeyColumns, ipLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IPLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := IPLogExists(ctx, tx, a.UserID, a.LastSeenAt); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testIPLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIPLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IPLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIPLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := IPLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ipLogDBTypes = map[string]string{`UserID`: `bigint`, `LastSeenAt`: `datetime`, `LastIP`: `varchar`}
	_            = bytes.MinRead
)

func testIPLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ipLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ipLogColumns) == len(ipLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIPLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ipLogColumns) == len(ipLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &IPLog{}
	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ipLogDBTypes, true, ipLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ipLogColumns, ipLogPrimaryKeyColumns) {
		fields = ipLogColumns
	} else {
		fields = strmangle.SetComplement(
			ipLogColumns,
			ipLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IPLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIPLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(ipLogColumns) == len(ipLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIPLogUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := IPLog{}
	if err = randomize.Struct(seed, &o, ipLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IPLog: %s", err)
	}

	count, err := IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ipLogDBTypes, false, ipLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize IPLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert IPLog: %s", err)
	}

	count, err = IPLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
