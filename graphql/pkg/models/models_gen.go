// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type NewChannel struct {
	Service Service `json:"service"`
	Channel string  `json:"channel"`
}

type NewRoom struct {
	Path    string     `json:"path"`
	Channel NewChannel `json:"channel"`
}

type PageInfo struct {
	HasNextPage bool `json:"hasNextPage"`
}

type RoomInput struct {
	Path    *string  `json:"path"`
	Service *Service `json:"service"`
	Channel *string  `json:"channel"`
}

type RoomOccupantEdge struct {
	Cursor    string    `json:"cursor"`
	EnteredAt Timestamp `json:"enteredAt"`
	Node      User      `json:"node"`
}

type RoomOccupantsConnection struct {
	PageInfo PageInfo            `json:"pageInfo"`
	Edges    []*RoomOccupantEdge `json:"edges"`
}

type ServiceInfo struct {
	Channel      Channel   `json:"channel"`
	UpdatedAt    Timestamp `json:"updatedAt"`
	Title        string    `json:"title"`
	ThumbnailURL string    `json:"thumbnailUrl"`
	Live         bool      `json:"live"`
	ViewerCount  int       `json:"viewerCount"`
}

type UserOccupiedRoomEdge struct {
	Cursor    string    `json:"cursor"`
	EnteredAt Timestamp `json:"enteredAt"`
	Node      Room      `json:"node"`
}

type UserRoomsOccupiedConnection struct {
	PageInfo PageInfo                `json:"pageInfo"`
	Edges    []*UserOccupiedRoomEdge `json:"edges"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Service string

const (
	ServiceAdvanced        Service = "ADVANCED"
	ServiceAngelthump      Service = "ANGELTHUMP"
	ServiceFacebook        Service = "FACEBOOK"
	ServiceM3u8            Service = "M3U8"
	ServiceMixer           Service = "MIXER"
	ServiceSmashcast       Service = "SMASHCAST"
	ServiceTwitch          Service = "TWITCH"
	ServiceTwtichVod       Service = "TWTICH_VOD"
	ServiceUstream         Service = "USTREAM"
	ServiceVaugn           Service = "VAUGN"
	ServiceYoutubePlaylist Service = "YOUTUBE_PLAYLIST"
	ServiceYoutube         Service = "YOUTUBE"
)

var AllService = []Service{
	ServiceAdvanced,
	ServiceAngelthump,
	ServiceFacebook,
	ServiceM3u8,
	ServiceMixer,
	ServiceSmashcast,
	ServiceTwitch,
	ServiceTwtichVod,
	ServiceUstream,
	ServiceVaugn,
	ServiceYoutubePlaylist,
	ServiceYoutube,
}

func (e Service) IsValid() bool {
	switch e {
	case ServiceAdvanced, ServiceAngelthump, ServiceFacebook, ServiceM3u8, ServiceMixer, ServiceSmashcast, ServiceTwitch, ServiceTwtichVod, ServiceUstream, ServiceVaugn, ServiceYoutubePlaylist, ServiceYoutube:
		return true
	}
	return false
}

func (e Service) String() string {
	return string(e)
}

func (e *Service) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Service(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Service", str)
	}
	return nil
}

func (e Service) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
